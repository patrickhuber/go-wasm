world wit{

    default export interface{
        record document {
            document-item: list<document-item>
        }

        variant document-item{
            %world(%world),
            %interface(%interface),
        }
        
        record %world{
            name: string,
            docs: docs,
            %default: option<%interface>,
            imports: list<tuple<string, %interface>>,
            exports: list<tuple<string, %interface>>,
        }
        
        record %interface{
            name: string,
            url: option<string>,
            docs: docs,
            types: list<type-def>,
            type-lookup: list<tuple<string, type-id>>,
            functions: list<function>,
            globals: list<global>,
        }
        
        record type-def{
            docs: docs,
            kind: type-def-kind,
            name: option<string>,
            foreign-module: option<string>,
        }
        
        variant type-def-kind{
            %record(%record),
            %flags(%flags),
            %tuple(%tuple),
            %variant(%variant),
            %enum(%enum),
            %option(%type),
            %result(%result),
            %union(%union),
            %list(%type),
            %future(option<%type>),
            %stream(%stream),
            %type(%type),
        }
        record %record{
            fields: list<field>,
        }
        
        record field{
            docs: docs,
            name: string,
            %type: %type,
        }
        
        record %flags{
            %flags: list<flag>,
        }
        
        record flag{
            docs: docs,
            name: string,
        }
        
        record %tuple{
            types: list<%type>,
        }
        
        record %variant{
            cases: list<case>,
        }
        
        record case {
            docs: docs,
            name: string,
            ty: option<%type>,
        }
        
        record %enum{
            cases: enum-case,
        }
        
        record enum-case {
            docs: docs,
            name: string,
        }
        
        record %result{
            ok: option<%type>,
            err: option<%type>,
        }
        
        record %union{
            cases: list<union-case>,
        }
        
        record union-case{
            docs: docs,
            ty: %type,
        }
        
        record %stream{
            element: option<%type>,
            end: option<%type>,
        }
        
        type type-id = string
        
        record function{
            docs: docs,
            name: string,
            kind: function-kind,
            params: params,
            results: results,
        }
        
        enum function-kind{
            freestanding,
        }
        
        type params = list<tuple<string, %type>>
        
        variant results{
            named(params),
            anon(%type),
        }
        
        record global{
            docs: docs,
            name: string,
            ty: %type,
        }
        
        variant %type{
            %bool,
            %u8,
            %u16,
            %u32,
            %u64,
            %s8,
            %s16,
            %s32,
            %s64,
            %float32,
            %float64,
            %char,
            %string,
            %id(type-id)
        }
        
        record docs{
            contents: option<string>,
        }
    }
}
